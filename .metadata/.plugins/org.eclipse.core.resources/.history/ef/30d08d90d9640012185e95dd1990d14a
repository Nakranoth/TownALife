package people;

import java.util.HashMap;
import java.util.Map;
import java.util.Random;
import java.util.Set;
import java.util.Map.Entry;

public class Preferences {
	
	private static double MUT_CHANCE = 0.2;
	private static double MUT_DEGREE = 5.0;
	
	public HashMap<String,Double> preferences = new HashMap<String,Double>();	//core object handled via call through functions.
	/**
	 * @param prefs1 Parent 1 for genetics
	 * @param prefs2 Parent 2 for genetics
	 */
	public static Preferences GenPrefs(Preferences prefs1, Preferences prefs2) {
		Preferences newPrefs = new Preferences();
		//Iterator prefs1i = prefs1.preferences.entrySet().iterator();
		
		Double pref1, pref2, curr;
		Random gen = new Random();
		
		for(Map.Entry<String, Double> i: prefs1.entrySet()){
			String key = i.getKey();
			pref1 = i.getValue();
			pref2 = prefs2.get(key);	//TODO add null checks?
			if(gen.nextInt(2) == 0){
				curr = pref1;
			}
			else
			{
				curr = pref2;
			}
			if (gen.nextDouble() < MUT_CHANCE){
				curr += gen.nextDouble() * MUT_DEGREE * 2 + 1 - MUT_DEGREE;
			}
			newPrefs.put(key, curr);
		}
		return newPrefs;
	}
	
	public Double put(String key, Double value){
		return preferences.put(key, value);
	}
	
	public Double get(String key){
		return preferences.get(key);
	}

	public Set<Entry<String, Double>> entrySet(){
		return preferences.entrySet();
	}

	public void normalize(String[] keys, double endSum) {
		double sum = 0.0;
		for (String key : keys)
		{
			sum += preferences.get(key);
		}
		double scale = endSum / sum;
		for (String key : keys)
		{
			preferences.put(key, preferences.get(key) * scale);
		}
	}
}
